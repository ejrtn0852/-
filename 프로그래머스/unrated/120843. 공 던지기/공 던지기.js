function solution(numbers, k) {
    // 첫 번째 선수가 공을 갖고있음
    let getBall = 1
    // 마지막 공을 던질 선수를 찾기위해 k-1 번까지 반복하며 다음 사람을 건너뛰도록 +2를 함
    for(let i = 0 ; i < k-1 ; i ++) {
        getBall+=2
        // 마지막 번호를 넘어가는 경우 처음 선수에게 공이 전달되도록  배열의 크기만큼 마이너스
        if(getBall > numbers.length) {
            getBall-=numbers.length
        }
    }
    return getBall
}


// 모듈러 연산은 나눗셈 연산과 관련된 연산으로, 특정한 '모듈로'라고 불리는 수로 나누었을 때의 나머지를 구하는 연산
// 기호로는 %를 사용하며, '모듈로 - "n"' 이라고 할 때, 어떤 수를 'n'으로 나눈 후의 나머지를 의미한다.

// 예를 들어, ` a % n `은 'a'를 'n'으로 나눈 나머지를 나타낸다. 이 연산의 결과는 항상 '0'이상 n'미만'이다.

// 모듈러 연산의 몇 가지 중요한 성질
// 1. 범위 제한 : 모듈러 연산을 사용하면 결과 값을 특정 범위 내로 제한할 수 있다. 
//             예를 들어, 'n'으로 모듈로 연산을 하면, 결과 값은 '0'에서 'n-1'사이의 정수가된다.

// 2. 주기성 : 모듈러 연산은 주기적인 성질을 가진다. 예를 들어, 시계에서 시간을 생각해보면 '24'시간이 지나면 다시 '0'시로
//           돌아오는것과 유사하다.

// 3. 계산 용이성: 큰 수에 대해 모듈러 연산을 수행하면, 결과를 작은 수로 나타낼 수 있어 계산이 간편해진다.

